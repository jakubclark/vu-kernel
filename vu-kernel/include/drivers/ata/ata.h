#ifndef __ATA_h
#define __ATA_h

#include "std/types.h"

typedef enum AtaCommand {
  ATA_CMD_NOP = 0x00,
  ATA_CMD_CFA_REQUEST_EXTENDED_ERROR = 0x03,
  ATA_CMD_DEVICE_RESET = 0x08,
  ATA_CMD_READ_SECTORS = 0x20,
  ATA_CMD_READ_SECTORS_EXT = 0x24,
  ATA_CMD_READ_DMA_EXT = 0x25,
  ATA_CMD_READ_DMA_QUEUED_EXT = 0x26,
  ATA_CMD_READ_NATIVE_MAX_ADDRESS_EXT = 0x27,
  ATA_CMD_READ_MULTIPLE_EXT = 0x29,
  ATA_CMD_READ_STREAM_DMA_EXT = 0x2a,
  ATA_CMD_READ_STREAM_EXT = 0x2b,
  ATA_CMD_READ_LOG_EXT = 0x2f,
  ATA_CMD_WRITE_SECTORS = 0x30,
  ATA_CMD_WRITE_SECTORS_EXT = 0x34,
  ATA_CMD_WRITE_DMA_EXT = 0x35,
  ATA_CMD_WRITE_DMA_QUEUED_EXT = 0x36,
  ATA_CMD_SET_MAX_ADDRESS_EXT = 0x37,
  ATA_CMD_CFA_WRITE_SECTORS_WITHOUT_ERASE = 0x38,
  ATA_CMD_WRITE_MULTIPLE_EXT = 0x39,
  ATA_CMD_WRITE_STREAM_DMA_EXT = 0x3a,
  ATA_CMD_WRITE_STREAM_EXT = 0x3b,
  ATA_CMD_WRITE_DMA_FUA_EXT = 0x3d,
  ATA_CMD_WRITE_DMA_QUEUED_FUA_EXT = 0x3e,
  ATA_CMD_WRITE_LOG_EXT = 0x3f,
  ATA_CMD_READ_VERIFY_SECTORS = 0x40,
  ATA_CMD_READ_VERIFY_SECTORS_EXT = 0x42,
  ATA_CMD_WRITE_UNCORRECTABLE_EXT = 0x45,
  ATA_CMD_READ_LOG_DMA_EXT = 0x47,
  ATA_CMD_CONFIGURE_STREAM = 0x51,
  ATA_CMD_WRITE_LOG_DMA_EXT = 0x57,
  ATA_CMD_TRUSTED_RECEIVE = 0x5c,
  ATA_CMD_TRUSTED_RECEIVE_DMA = 0x5d,
  ATA_CMD_TRUSTED_SEND = 0x5e,
  ATA_CMD_TRUSTED_SEND_DMA = 0x5f,
  ATA_CMD_CFA_TRANSLATE_SECTOR = 0x87,
  ATA_CMD_EXECUTE_DEVICE_DIAGNOSTIC = 0x90,
  ATA_CMD_DOWNLOAD_MICROCODE = 0x92,
  ATA_CMD_PACKET = 0xa0,
  ATA_CMD_IDENTIFY_PACKET_DEVICE = 0xa1,
  ATA_CMD_SERVICE = 0xa2,
  ATA_CMD_SMART = 0xb0,
  ATA_CMD_DEVICE_CONFIGURATION_OVERLAY = 0xb1,
  ATA_CMD_NV_CACHE = 0xb6,
  ATA_CMD_CFA_ERASE_SECTORS = 0xc0,
  ATA_CMD_READ_MULTIPLE = 0xc4,
  ATA_CMD_WRITE_MULTIPLE = 0xc5,
  ATA_CMD_SET_MULTIPLE_MODE = 0xc6,
  ATA_CMD_READ_DMA_QUEUED = 0xc7,
  ATA_CMD_READ_DMA = 0xc8,
  ATA_CMD_WRITE_DMA = 0xca,
  ATA_CMD_WRITE_DMA_QUEUED = 0xcc,
  ATA_CMD_CFA_WRITE_MULTIPLE_WITHOUT_ERASE = 0xcd,
  ATA_CMD_WRITE_MULTIPLE_FUA_EXT = 0xce,
  ATA_CMD_CHECK_MEDIA_CARD_TYPE = 0xd1,
  ATA_CMD_STANDBY_IMMEDIATE = 0xe0,
  ATA_CMD_IDLE_IMMEDIATE = 0xe1,
  ATA_CMD_STANDBY = 0xe2,
  ATA_CMD_IDLE = 0xe3,
  ATA_CMD_READ_BUFFER = 0xe4,
  ATA_CMD_CHECK_POWER_MODE = 0xe5,
  ATA_CMD_SLEEP = 0xe6,
  ATA_CMD_FLUSH_CACHE = 0xe7,
  ATA_CMD_WRITE_BUFFER = 0xe8,
  ATA_CMD_FLUSH_CACHE_EXT = 0xea,
  ATA_CMD_IDENTIFY_DEVICE = 0xec,
  ATA_CMD_SET_FEATURES = 0xef,
  ATA_CMD_SECURITY_SET_PASSWORD = 0xf1,
  ATA_CMD_SECURITY_UNLOCK = 0xf2,
  ATA_CMD_SECURITY_EARASE_PREPARE = 0xf3,
  ATA_CMD_SECURITY_ERASE_UNIT = 0xf4,
  ATA_CMD_SECURITY_FREEZE_LOCK = 0xf5,
  ATA_CMD_SECURITY_DISABLE_PASSWORD = 0xf6,
  ATA_CMD_READ_NATIVE_MAX_ADDRESS = 0xf8,
  ATA_CMD_SET_MAX_ADDRESS = 0xf9
} AtaCommand;

typedef enum AtaStatus {
  ATA_STAT_BUSY = 0x80,
  ATA_STAT_READY = 0x40,
  ATA_STAT_FAULT = 0x20,
  ATA_STAT_SEEK = 0x10,
  ATA_STAT_DRQ = 0x08,
  ATA_STAT_CORR = 0x04,
  ATA_STAT_INDEX = 0x02,
  ATA_STAT_ERR = 0x01,
} AtaStatus;

uint16_t drive;

#define SECTORSIZE 512
#define DISK_PORT 0x1F0

extern void init_ata();
/* Read sector number `addr` and store the results into `buffer`.
 * The buffer itself is returned */
extern void ata_read_sector(uint32_t addr, uint8_t *buffer);
extern uint32_t ata_write_sector(uint32_t addr, uint8_t *buffer);

#endif
